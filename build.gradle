import java.nio.file.Files
import java.nio.file.NoSuchFileException
import java.nio.file.Paths
import java.time.LocalDateTime

/*
 * Copyright 2016 E-System LLC
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.3"
    }
}

wrapper {
    gradleVersion = '7.4.1'
}

apply from: "build-${profile}.gradle"
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'groovy'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'

configurations.all {
    resolutionStrategy {
        cacheChangingModulesFor 0, 'seconds'
        cacheDynamicVersionsFor 0, 'seconds'
    }
}

sourceCompatibility = JavaVersion.VERSION_1_8
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

group = ext.mainGroup
version = ext.mainVersion + (ext.snapshot ? '-SNAPSHOT' : '')

repositories {
    mavenCentral()
    maven {
        url "${artifactory_contextUrl}/libs-${project.ext.snapshot ? 'all-local' : 'release'}"
        credentials {
            username = 'public-reader'
            password = 'Public-reader_123'
        }
    }
    mavenLocal()
}

idea {
    project {
        jdkName = '1.8'
        languageLevel = JavaVersion.VERSION_1_8
    }
    module {
        downloadJavadoc = false
        downloadSources = false
        inheritOutputDirs = true
        excludeDirs += file('gradle')
        excludeDirs += file('out')
    }
}

def propName = rootProject.name
def fullPath = '/com/es/lib/spring'
if (!fullPath.startsWith('/src/main/resources')) {
    fullPath = '/src/main/resources' + fullPath
}
def versionString = "${project.version}"
def filePath = "${project.projectDir}${fullPath}/"
new File(filePath).mkdirs()
try {
    Files.delete(Paths.get(filePath, 'build.properties'))
} catch (NoSuchFileException ignore) {
}
println("Create file for property: ${filePath}")
project.ant.propertyfile(file: "${filePath}build.properties") {
    ant.entry(key: 'name', value: propName)
    ant.entry(key: 'version', value: versionString)
    ant.entry(key: 'date', value: "${LocalDateTime.now().toString()}")
}

jar {
    manifest {
        attributes(
            'Implementation-Version': project.version,
            'Implementation-Vendor': 'E-SYSTEM'
        )
    }
}
javadoc {
    failOnError = false
    options.encoding = 'utf-8'
}
tasks.create(name: 'javadocJar', type: Jar, dependsOn: 'javadoc') {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
tasks.create(name: 'sourceJar', type: Jar) {
    from sourceSets.main.allJava
}

artifacts {
    archives javadocJar
    archives sourceJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact javadocJar {
                classifier 'javadoc'
            }
            artifact sourceJar {
                classifier 'sources'
            }
        }
    }
}
ext {
    springVersion = '2.6.4'
    pgVersion = '42.3.3'
    lombokVersion = '1.18.22'
    springDocVersion = '1.6.6'
    commonVersion = "1.5.0${project.ext.snapshot ? '-SNAPSHOT' : ''}"
}
dependencies {
    api "com.es.lib:common-lib:${commonVersion}"
    api "com.es.lib:common-entity:${commonVersion}"
    api "com.es.lib:common-dto:${commonVersion}"
    api "com.es.lib:common-validator:${commonVersion}"

    api "commons-io:commons-io:2.11.0"
    api "javax.servlet:javax.servlet-api:4.0.1"
    api "net.coobird:thumbnailator:0.4.17"

    compileOnly "org.springframework.boot:spring-boot-starter-web:${springVersion}"
    compileOnly "org.springframework.boot:spring-boot-starter-jdbc:${springVersion}"
    compileOnly "org.springframework.boot:spring-boot-starter-security:${springVersion}"
    compileOnly "org.springframework.boot:spring-boot-starter-data-jpa:${springVersion}"
    compileOnly "org.springframework.security.oauth:spring-security-oauth2:2.5.1.RELEASE"
    compileOnly "org.springdoc:springdoc-openapi-ui:${springDocVersion}"
    compileOnly "org.postgresql:postgresql:${pgVersion}"

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testImplementation 'org.spockframework:spock-core:2.1-groovy-3.0'
    testImplementation 'org.spockframework:spock-spring:2.1-groovy-3.0'
    testImplementation "org.springframework.boot:spring-boot-starter-web:${springVersion}"
    testImplementation "org.springframework.boot:spring-boot-starter-test:${springVersion}"
    testImplementation "org.springdoc:springdoc-openapi-ui:${springDocVersion}"
}

test {
    useJUnitPlatform()
    systemProperty 'spring.profiles.active', 'test'
    finalizedBy jacocoTestReport
}

def sonarAvailable = properties['sonar_url'] != null && properties['sonar_user'] != null && properties['sonar_password'] != null
if (sonarAvailable) {
    apply plugin: 'org.sonarqube'
    sonarqube {
        properties {
            property "sonar.host.url", "${sonar_url}"
            property "sonar.login", "${sonar_user}"
            property "sonar.password", "${sonar_password}"
        }
    }
}